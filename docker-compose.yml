version: "3.8"

services:
  api_user:
    container_name: api_user
    image: api_user
    restart: always
    build: ./users
    ports:
      - "3000:3000"
    # volumes:
    #   - /usr/src/app
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=user_db
      - DB_PORT=5432
      - DB_NAME=user_db
    depends_on:
      - user_db
    networks:
      - user_net
      - app_net
    # links:
    #   - user_db

  user_db:
    container_name: user_db
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_db
    ports:
      - "5432:5432"
    networks:
      - user_net
    volumes:
      - ./pgdata:/var/lib/postgresql/data/
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
  
  posts:
    container_name: api_posts
    image: api_posts
    build: ./posts
    ports:
      - "3001:3000"
    environment:
      DB_NAME: monitor_posts
      DB_HOST: posts_db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      USERS_PATH: api_user
    depends_on:
      posts_db:
        condition: service_healthy
    networks:
      - app_net
      - posts_net
  posts_db:
    container_name: posts_db
    image: postgres
    environment:
      POSTGRES_DB: monitor_posts
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    networks:
      - posts_net

networks:
  app_net:
    driver: bridge
  user_net:
    driver: bridge
  posts_net:
    driver: bridge
